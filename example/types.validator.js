//@flow
'use strict';
// Generated by flow-jsonschema from ./types.js.
// DO NOT EDIT.

const assert = require('assert');
const Ajv = require('ajv');
const ajvDefault = new Ajv();
const ajvAllErrors = new Ajv({allErrors: true});

/*::
export type A = $Exact<{bool: boolean, num: number, numLit: 1 | 20, numNull: ?number, numOpt?: number, str: string, strLit: "a" | "bc"}>;
export type B = $Exact<{arr: Array<$Exact<{bool: boolean, num: number, numLit: 1 | 20, numNull: ?number, numOpt?: number, str: string, strLit: "a" | "bc"}>>, c: string | number, d: boolean | null, e: $Exact<{a: 1, b: string}> | $Exact<{a: 2, b: number}>, f: {[zz: string]: number | string}, tuple: [string, number, 1 | 2]}>;

type ValidationOptions = {
    allErrors?: boolean,
};
export type ValidationErrorDesc = {|
    keyword: string,
    dataPath: string,
    schemaPath: string,
    params: Object,
    message: string,
|};
*/

class ValidationError extends Error {
    /*::
    typeName: string;
    errors: ValidationErrorDesc[];
    */
    constructor(typeName/*: string*/, errors/*: ValidationErrorDesc[]*/) {
        super(errors.length > 0 ? (typeName + errors[0].dataPath + ': ' + errors[0].message) : '(no errors)');
        this.typeName = typeName;
        this.errors = errors;
    }
}

let g_validators = {};
let g_validatorsAllErrors = {};

// Checks whether `val` is a valid A.
function checkA(val/*: A*/, opts/*: ValidationOptions*/={})/*: boolean*/ {
    const ajv = opts.allErrors ? ajvAllErrors : ajvDefault;
    const validators = opts.allErrors ? g_validatorsAllErrors : g_validators;

    let validator = validators["A"];
    if (validator == null) {
        let schema = {
            "type": "object",
            "properties": {
                "bool": {
                    "type": "boolean"
                },
                "num": {
                    "type": "number"
                },
                "numLit": {
                    "anyOf": [
                        {
                            "type": "number",
                            "enum": [
                                1
                            ]
                        },
                        {
                            "type": "number",
                            "enum": [
                                20
                            ]
                        }
                    ]
                },
                "numNull": {
                    "anyOf": [
                        {
                            "type": "null"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "numOpt": {
                    "type": "number"
                },
                "str": {
                    "type": "string"
                },
                "strLit": {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "a"
                            ]
                        },
                        {
                            "type": "string",
                            "enum": [
                                "bc"
                            ]
                        }
                    ]
                }
            },
            "required": [
                "bool",
                "num",
                "numLit",
                "numNull",
                "str",
                "strLit"
            ],
            "additionalProperties": false
        };
        validator = ajv.compile(schema);
        validators["A"] = validator;
    }
    let ret/*: boolean*/ = validator(val);
    assert(typeof ret === 'boolean');
    let errors/*: ?Array<ValidationErrorDesc>*/ = (validator/*: any*/).errors;
    (checkA/*: any*/).errors = errors;
    return ret;
};

// Checks whether `val` is a valid A.
// @returns `val` as is if it's a valid A, throws if not.
function assertA(val/*: A*/, opts/*: ValidationOptions*/={})/*: A*/ {
    let ret = checkA(val, opts);
    assert(typeof ret === 'boolean');
    if (ret) {
        return val;
    } else {
        let errors/*: ?Array<ValidationErrorDesc>*/ = (checkA/*: any*/).errors;
        if (errors == null || errors.length === 0) {
            throw new Error('json validation failed');
        }
        throw new ValidationError("A", errors);
    }
};

// Checks whether `val` is a valid B.
function checkB(val/*: B*/, opts/*: ValidationOptions*/={})/*: boolean*/ {
    const ajv = opts.allErrors ? ajvAllErrors : ajvDefault;
    const validators = opts.allErrors ? g_validatorsAllErrors : g_validators;

    let validator = validators["B"];
    if (validator == null) {
        let schema = {
            "type": "object",
            "properties": {
                "arr": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "bool": {
                                "type": "boolean"
                            },
                            "num": {
                                "type": "number"
                            },
                            "numLit": {
                                "anyOf": [
                                    {
                                        "type": "number",
                                        "enum": [
                                            1
                                        ]
                                    },
                                    {
                                        "type": "number",
                                        "enum": [
                                            20
                                        ]
                                    }
                                ]
                            },
                            "numNull": {
                                "anyOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "numOpt": {
                                "type": "number"
                            },
                            "str": {
                                "type": "string"
                            },
                            "strLit": {
                                "anyOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "a"
                                        ]
                                    },
                                    {
                                        "type": "string",
                                        "enum": [
                                            "bc"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "bool",
                            "num",
                            "numLit",
                            "numNull",
                            "str",
                            "strLit"
                        ],
                        "additionalProperties": false
                    }
                },
                "c": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "d": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "e": {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "a": {
                                    "type": "number",
                                    "enum": [
                                        1
                                    ]
                                },
                                "b": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "a",
                                "b"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "a": {
                                    "type": "number",
                                    "enum": [
                                        2
                                    ]
                                },
                                "b": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "a",
                                "b"
                            ],
                            "additionalProperties": false
                        }
                    ]
                },
                "f": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "additionalProperties": false
                },
                "tuple": {
                    "type": "array",
                    "items": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "anyOf": [
                                {
                                    "type": "number",
                                    "enum": [
                                        1
                                    ]
                                },
                                {
                                    "type": "number",
                                    "enum": [
                                        2
                                    ]
                                }
                            ]
                        }
                    ]
                }
            },
            "required": [
                "arr",
                "c",
                "d",
                "e",
                "f",
                "tuple"
            ],
            "additionalProperties": false
        };
        validator = ajv.compile(schema);
        validators["B"] = validator;
    }
    let ret/*: boolean*/ = validator(val);
    assert(typeof ret === 'boolean');
    let errors/*: ?Array<ValidationErrorDesc>*/ = (validator/*: any*/).errors;
    (checkB/*: any*/).errors = errors;
    return ret;
};

// Checks whether `val` is a valid B.
// @returns `val` as is if it's a valid B, throws if not.
function assertB(val/*: B*/, opts/*: ValidationOptions*/={})/*: B*/ {
    let ret = checkB(val, opts);
    assert(typeof ret === 'boolean');
    if (ret) {
        return val;
    } else {
        let errors/*: ?Array<ValidationErrorDesc>*/ = (checkB/*: any*/).errors;
        if (errors == null || errors.length === 0) {
            throw new Error('json validation failed');
        }
        throw new ValidationError("B", errors);
    }
};

module.exports = {
    ValidationError,
    checkA,
    assertA,
    checkB,
    assertB,
};